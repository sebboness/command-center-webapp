import * as React from "react";
import { IComponentWithValidatedForm } from "./";
import { FormFieldProps } from "../editors";

export type ValidatedFormFieldBaseProps = FormFieldProps & {
    disabled?: boolean;
    formComponent: IComponentWithValidatedForm;
    onInputChange?: (fieldName: string, value: any) => void;
    readonly?: boolean;
    value?: any;
};

export class ValidatedFormFieldBase<TProps, TState> extends React.Component<ValidatedFormFieldBaseProps & TProps, TState> {
    /**
     * Returns the validation errors generated by the form component
     */
    public getErrors = (): string[] => {
        return this.props.formComponent.getFieldErrors(this.props.name);
    }

    /**
     * Returns the label if provided, otherwise the label from the meta data retrieved from the form component
     */
    public getLabel = (label?: string): string => {
        if (label !== undefined)
            return label;
        else
            return this.props.formComponent.getFieldLabel(this.props.name);
    }

    /**
     * If a value is provided, returns the value, otherwise retrieves the value from the provided formComponent
     */
    public getValue = (returnNullAsEmpty: boolean = false): any => {
        if (this.props.value !== undefined && this.props.value !== null)
            return this.props.value;
        else
            return this.props.formComponent.getFieldValue(this.props.name, returnNullAsEmpty);
    }

    /**
     * Returns the required flag if provided, otherwise retrieves flag value from the form component
     */
    public isRequired = (required?: boolean): boolean => {
        if (required !== undefined)
            return required;
        else
            return this.props.formComponent.isFieldRequired(this.props.name);
    }

    /**
     * handler for input change event
     */
    public onChangeInput = (e: React.ChangeEvent<HTMLInputElement & HTMLSelectElement & HTMLTextAreaElement>) => {
        if (this.props.onInputChange)
            this.props.onInputChange(e.target.name, e.target.value);
    }
}
